#Auto gen by simple-dao-codegen 2023-2-5 11:13:19

spring:
  application:
    name: framework-base
  #线程池配置
  task:
    execution:
      pool:
        core-size: 200

    #调度器线程
    scheduling:
      pool:
        size: 200

  cache:
#    type: redis
    type: GENERIC

  redis:
    client-type: lettuce
    lettuce:
      pool:
        enabled: true
        min-idle: 8
        max-idle: 50
        max-active: 300

  main:
    allow-circular-references: true

  # 数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid: #单独使用druid时的配置
      initial-size: 50
      max-active: 500
      min-idle: 10
      max-wait: 60000
      min-evictable-idle-time-millis: 1800000
      max-evictable-idle-time-millis: 1800000
      time-between-eviction-runs-millis: 0
      validation-query: select 1
      validation-query-timeout: 60000
      test-on-borrow: false
      test-on-return: false
      test-while-idle: true
      filters: stat,wall
      stat-view-servlet:
        loginUsername: admin
        loginPassword: 123456
        enabled: true
        url-pattern: /druid/*
        allow: " "

  #    url: jdbc:h2:./dev.db;MODE=MySQL;
  #    url: jdbc:h2:mem:dev.db;
  #    username: dev
  #    password: dev

  #JPA配置
  jpa:
    show-sql: false
    #    generate-ddl: false
    #    database: H2
    #关闭视图事务，避免jpa 出现 N + 1 查询
    open-in-view: false
    hibernate:
      ddl-auto: update
      naming:
        #模块表名前缀映射类，重要
        physical-strategy: com.levin.commons.dao.support.EntityNamingStrategy

        #      MYSQL 配置选项
        properties:
          #        hibernate.dialect: org.hibernate.dialect.MySQL57Dialect
          hibernate.id.new_generator_mappings: false
  #        hibernate.dialect.storage_engine: innodb

  # spring.mvc.date-format和spring.jackson.date-format区别
  #  当Content-Type 为 application/json，dispatcherServlet会使用jackson的MessageConvert，里面解析json的convert为jackson的配置
  #
  #  @JsonFormat(优先级高)  或  spring.jackson.date-format
  #
  #  当Content-Type 为 application/x-www-form-urlencoded（普通表单上传），使用的是ModelAttributeMethodProcessor ，使用的是mvc自己的配置
  #  spring.mvc.date-format(优先级高) 或 @DatetimeFormat
  jackson:
    #date-format: yyyy-MM-dd HH:mm:ss
    #兼容多种格式
    date-format: com.levin.commons.format.DefaultDateFormat
    time-zone: GMT+8
    locale: zh_CN

  mvc:
    format:
      date: yyyy-MM-dd
      date-time: yyyy-MM-dd HH:mm:ss
      time: HH:mm:ss

  #====================== spring-boot-admin ===============
  #被管理节点的配置
  boot:
    admin:
      client:
        #        管理服务器的地址，用于注册当前节点
        #        要注册的server端的url地址。如果要同时在多个server端口注册，则用逗号分隔各个server端的url地址
        url: http://localhost:8080

#管理服务的配置，只要一个节点中配置
management:
  server:
    #管理路径，建议不填
#    base-path: /management
#    port: 19876

  #========= 被管理节点的配置 ===============
  endpoints: # 启动所有监控点
    web:
      exposure:
        include: '*'

  info: # spring-boot 2.6以后info默认值为false.需手动开启
    env:
      enabled: true
      #====================== spring-boot-admin ===============

###############################  j2cache ###################
j2cache:
  #  config-location: /j2cache.properties
  #  开启对spring cache 的支持
  open-spring-cache: true

  #  缓存清除模式
  #  active:主动清除，二级缓存过期主动通知各节点清除，优点在于所有节点可以同时收到缓存清除
  #  passive:被动清除，一级缓存过期进行通知各节点清除一二级缓存
  #  blend:两种模式一起运作，对于各个节点缓存准确性以及及时性要求高的可以使用（推荐使用前面两种模式中一种）
  cache-clean-mode: passive

  #尽量不要允许空值，虽然会导致缓存不命中，但是可以避免数据更新问题
  allow-null-values: false
  default_cache_null_object: false

  redis-client: lettuce #指定redis客户端使用lettuce，也可以使用Jedis

  l2-cache-open: true #开启二级缓存

  #SpringJ2CacheConfigUtil
  sync_ttl_to_redis: false

#    if ("java".equals(ser)) {
#    g_serializer = new JavaSerializer();
#    } else if ("fst".equals(ser)) {
#    g_serializer = new FSTSerializer();
#    } else if ("kryo".equals(ser)) {
#    g_serializer = new KryoSerializer();
#    } else if ("kryo-pool".equals(ser)) {
#    g_serializer = new KryoPoolSerializer();
#    } else if ("fst-snappy".equals(ser)) {
#    g_serializer = new FstSnappySerializer();
#    } else if ("json".equals(ser)) {
#    g_serializer = new FstJSONSerializer(props);
#    } else if ("fastjson".equals(ser)) {
#    g_serializer = new FastjsonSerializer();
#    } else if ("fse".equals(ser)) {
#    g_serializer = new FseSerializer();
  serialization: fastjson
  #广播器
  broadcast: net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy
  #  broadcast: jgroups
  L1: #指定一级缓存提供者为caffeine
    provider_class: caffeine

  L2: #指定二级缓存提供者为redis
    provider_class: net.oschina.j2cache.cache.support.redis.SpringRedisProvider
    config_section: lettuce

caffeine:
  properties: /caffeine.properties   # 这个配置文件需要放在项目中

lettuce:
  mode: single
  namespace:
  storage: generic
  channel: j2cache
  scheme: redis
  hosts: ${spring.redis.host:localhost}:${spring.redis.port:6379}
  password: ${spring.redis.password:}
  database: ${spring.redis.database:0}
  sentinelMasterId:
  maxTotal: 100
  maxIdle: 10
  minIdle: 10
  timeout: 10000
############## Sa-Token 配置 (文档: https://sa-token.cc) ##############
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: Authorization
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效
  timeout: 2592000
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: -1
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: true
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: uuid
  # 是否输出操作日志
  is-log: true

#dubbo 配置
dubbo:
  application:
    name: dubbo-node
  protocol:
    name: tri
    port: -1
    ext-protocol: dubbo,
  registry:
    address: #zookeeper://${zookeeper.address:127.0.0.1}:2181

  provider:
    # ① 如果异常类和接口类在同一个 jar 包中，那么不会走封装的逻辑，会直接返回；
    # ② 如果异常类是以 java. 或者 javax. 开头的那么也会直接抛出。
    # ③ 如果异常类和接口类不在同一个 jar 包中，那么会走封装的逻辑，会将异常类包装成一个 RuntimeException 并抛出。
    filter: -exception

springdoc:
  swagger-ui:
    path: /api-docs/swagger-ui.html
    tags-sorter: alpha
    # 该参数是swagger默认的排序规则，如果设置为alpha，那么Knife4j提供的按照order排序的增强规则不生效
    operations-sorter: alpha

# 插件系统配置
plugin:
  com:
    levin:
      oak:
        base:
          framework:
            admin-path: /
            api-doc-path: /api-docs

#            controller-acl:
#              exclude-path-patterns: "/v3/api-docs/**"

            sign:
              enable: false
            log:
              exclude-path-patterns: /**/api/amis/page

            resources-acl:
              - includePathPatterns: "/templates/com.levin.oak.base/**"
                denied: true
#              - exclude-path-patterns: /swagger-ui/**,/webjars/**

            enable-mock-sms-send: true
            enableSmsVerificationCode: false

#日志配置
logging:
  level:
    root: warn
    com.levin: debug
    com.levin.oak.base: debug
